この文章はプログラム初心者の7-153がなんとなく把握したローカル変数についての説明文です。
いろいろと間違っている可能性があります。

ローカル変数とは？

LOCAL,LOCAL:1,～
ARG,ARG:1,～
のこと、eramakerでは使えずemuera専用構文の一つである。
使い方は他の変数、FLAG,TFLAG,CFLAGなどと同じで
	LOCAL = 5 (LOCALに5を代入)
	CFLAG:1 += LOCAL
とか
	IF TALENT:ARG:0 (ARG番目のキャラが処女であるかどうか)
などなど。


LOCALの使い方
	これらのローカル変数は、関数間(@以下のひとまとまり)での受け渡しが出来ない、という特徴を持っている。
	通常の変数、例えばFLAGなら
		@AAA
		FLAG:0 = 5
		CALL BBB

		@BBB
		FLAG:13 = FLAG:5

	のようにCALLなどで関数が呼び出されても変数の中身は変わらずそのまま使うことが出来る。
	このときFLAG:13 = 5である

	一方LOCALは
		@AAA
		LOCAL = 5
		CALL BBB

		@BBB
		FLAG:13 = LOCAL

	といった使い方は出来ない。@AAAでLOCALに5を代入しても@BBBにLOCAL=5という結果は受け渡されないので
	このときFLAG:13 = 0である。

	このような挙動をするLOCALは計算結果の一時的な保存などに用いられる。
	eramakerではそのような処理は
		A = 5
	などのように一文字変数がよく用いられてきた。
	例えばこのAにすでに数字が代入されており、後の処理でその数値を用いるということがあるならば
	Aに数値を代入するわけにはいかず他の変数を使わなければならない。
	一文字変数はこのようなとき、その挙動を把握するのが面倒であるが、LOCALならばその関数内だけを
	注意すれば事足りるので、こういったかるい計算処理ならばLOCALを用いるべきである。

ARGの使い方
	何かの計算結果を次の関数でも使いたいとき、LOCALではこのような処理は出来ない。
	一文字変数を用いるならば
		@AAA
		A = 5
		CALL BBB

		@BBB
		IF TALENT:A:0
		～
	とできるが、前述の通り一文字変数はその挙動を正確に把握しなければせっかく保存した数値を破壊してしまうかもしれない。
	特にCALLで関数を呼び出したりしていると作っている側もこの一文字変数を用いていいのかわからなくなる。
	こういった軽い計算の受け渡しに用いるのがARGである。
		@AAA
		LOCAL = 5
		CALL BBB
	このままでは@BBBではLOCAL = 5という結果を用いることは出来ない。
	そこでemueraでは
		@AAA
		LOCAL = 5
		CALL BBB(LOCAL)
	という処理をする。CALL BBB(LOCAL)とは@BBBでLOCAL = 5という結果を使う、という意味である。
		@AAA
		LOCAL = 5
		CALL BBB(LOCAL)

		@BBB(ARG)
		IF TALENT:ARG:0
		～
	このような数値の受け渡しに用いるのがARGである。↑の構文ではCALL BBB(LOCAL)で@BBBにLOCAL = 5という結果をARG = 5
	として引き渡すという処理を行っている。
	このような処理は複数の変数について可能であり、
		@AAA
		LOCAL = 5
		LOCAL:1 = 10
		CALL BBB(LOCAL,LOCAL:1)

		@BBB(ARG,ARG:1)
		IF TALENT:ARG:0 || TALENT:(ARG:1):0
		～
	という構文では@AAAから@BBBを呼び出す際にARG = LOCAL、ARG:1 = LOCAL:1という処理が加わっている。

以上SQRでよく見かけるLOCAL変数の解説でした。
